language: node_js
node_js:
  - "18"

# Specify Ubuntu 20.04 (Focal Fossa)
dist: focal

# Allow both main and master branches
branches:
  only:
    - master
    - main

before_install:
  # Update system packages
  - sudo apt-get update
  - sudo apt-get install -y jq
  # Remove any existing npm config
  - rm -f .npmrc
  - rm -rf ~/.npm
  # Clear npm cache
  - npm cache clean --force
  # Install AWS CLI for S3/CloudFront
  - pip install --user awscli
  - npm install -g npm@9.8.1
  # Configure AWS credentials
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  - aws configure set region $AWS_DEFAULT_REGION
  # Verify AWS credentials
  - aws sts get-caller-identity
  # Assume deployment role
  - |
    CREDENTIALS=$(aws sts assume-role \
      --role-arn $AWS_ROLE_ARN \
      --role-session-name "TravisDeployment" \
      --duration-seconds 900)
  - export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r .Credentials.AccessKeyId)
  - export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r .Credentials.SecretAccessKey)
  - export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r .Credentials.SessionToken)
  # Verify assumed role
  - aws sts get-caller-identity

install:
  - npm ci

script:
  - echo "Starting static site deployment..."
  # Verify environment variables (will show if they exist, not their values)
  - |
    echo "Checking environment variables..."
    for var in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION CLOUDFRONT_DISTRIBUTION_ID GITHUB_TOKEN; do
      if [ -z "${!var}" ]; then
        echo "❌ $var is not set"
      else
        echo "✅ $var is set"
      fi
    done

deploy:
  # S3 Deployment for static site
  provider: s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  bucket: jesseclark.io
  region: us-east-1
  skip_cleanup: true
  local_dir: .
  acl: public_read
  on:
    all_branches: true
    condition: $TRAVIS_BRANCH =~ ^(master|main)$ && $TRAVIS_PULL_REQUEST = false

after_deploy:
  # Invalidate CloudFront cache
  - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
  - echo "CloudFront cache invalidated"

after_success:
  - echo "Build completed successfully"

after_failure:
  - echo "Build failed"

notifications:
  email:
    recipients:
      - jesseclark@duck.com
    on_success: change
    on_failure: always

env:
  global:
    - AWS_DEFAULT_REGION=us-east-1
    - CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID
    - AWS_ROLE_ARN=arn:aws:iam::500194254701:role/email-from-lambda-role
